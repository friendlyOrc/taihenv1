"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var enzyme_adapter_react_16_1 = __importDefault(require("enzyme-adapter-react-16"));
var React = __importStar(require("react"));
var ReactDOM = __importStar(require("react-dom"));
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var _1 = require(".");
enzyme_1.configure({ adapter: new enzyme_adapter_react_16_1.default() });
var loadingCopy = 'Loading Component';
var errorCopy = 'Error Component';
var errorMessage = 'Something went wrong!';
var successMessage = 'It worked!';
var fakeNetworkResponse = function (milliseconds) {
    return new Promise(function (resolve) { return setTimeout(function () {
        resolve({ message: successMessage });
    }, milliseconds); });
};
var performAsyncWithData = function () { return __awaiter(_this, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fakeNetworkResponse(200)];
            case 1:
                response = _a.sent();
                return [2 /*return*/, response];
        }
    });
}); };
var ContentComponent = function (_a) {
    var message = _a.message;
    return React.createElement("div", null,
        "Content Component: ",
        message);
};
var LoadingComponent = function () { return React.createElement("div", null, loadingCopy); };
var ErrorComponent = function () { return React.createElement("div", null, errorCopy); };
var performAsyncSuccess = function () { return Promise.resolve(); };
var performAsyncFailure = function () { return Promise.reject(new Error(errorMessage)); };
var performAsyncFailureHangs = function () { return new Promise(function (_resolve) { return undefined; }); };
describe('Render prop', function () {
    describe('basic rendering', function () {
        var TestComponent = function () {
            return React.createElement(_1.RendersAfterAsync, { performAsync: performAsyncWithData }, function (_a) {
                var data = _a.data, error = _a.error, isLoading = _a.isLoading;
                if (isLoading)
                    return React.createElement(LoadingComponent, null);
                if (error)
                    return React.createElement(ErrorComponent, null);
                if (data)
                    return React.createElement("h1", null, data.message);
                return null;
            });
        };
        var renderedComponent = React.createElement(TestComponent, null);
        it('renders without crashing', function () {
            expect(true).toBe(true);
            var div = document.createElement('div');
            ReactDOM.render(renderedComponent, div);
            setTimeout(function () {
                ReactDOM.unmountComponentAtNode(div);
            }, 0);
        });
        it('matches snapshot', function () {
            setTimeout(function () {
                var tree = react_test_renderer_1.default
                    .create(renderedComponent)
                    .toJSON();
                expect(tree).toMatchSnapshot();
            }, 1000);
        });
    });
    describe('render states', function () {
        describe('loading', function () {
            var TestComponent = function () {
                return React.createElement(_1.RendersAfterAsync, { performAsync: performAsyncFailureHangs }, function (_a) {
                    var data = _a.data, error = _a.error, isLoading = _a.isLoading;
                    if (error)
                        return React.createElement(ErrorComponent, null);
                    if (isLoading)
                        return React.createElement(LoadingComponent, null);
                    if (data)
                        return React.createElement("h1", null, "Success");
                    return null;
                });
            };
            var wrapper = enzyme_1.mount(React.createElement(TestComponent, null));
            it('renders the specified loading markup', function (done) {
                expect(wrapper.text()).toBe(loadingCopy);
                done();
            });
        });
        describe('error', function () {
            var TestComponent = function () {
                return React.createElement(_1.RendersAfterAsync, { performAsync: performAsyncFailure }, function (_a) {
                    var data = _a.data, error = _a.error, isLoading = _a.isLoading;
                    if (isLoading)
                        return React.createElement(LoadingComponent, null);
                    if (error)
                        return React.createElement(ErrorComponent, null);
                    if (data)
                        return React.createElement("h1", null, "Success");
                    return null;
                });
            };
            var wrapper = enzyme_1.mount(React.createElement(TestComponent, null));
            it('renders the specified error markup', function (done) {
                expect(wrapper.text()).toBe(errorCopy);
                done();
            });
        });
        describe('success', function () {
            var TestComponent = function () {
                return React.createElement(_1.RendersAfterAsync, { performAsync: performAsyncWithData }, function (_a) {
                    var data = _a.data, error = _a.error, isLoading = _a.isLoading;
                    if (isLoading)
                        return React.createElement(LoadingComponent, null);
                    if (error)
                        return React.createElement(ErrorComponent, null);
                    if (data)
                        return React.createElement("div", null, "Success");
                    return null;
                });
            };
            var wrapper = enzyme_1.mount(React.createElement(TestComponent, null));
            it('renders the specified success markup', function (done) {
                setTimeout(function () {
                    expect(wrapper.text()).toBe('Success');
                    done();
                }, 1000);
            });
        });
    });
});
describe('Higher order component', function () {
    describe('basic rendering', function () {
        var WrappedContentComponent = _1.rendersAfterAsync(performAsyncSuccess)(ContentComponent);
        var renderedComponent = React.createElement(WrappedContentComponent, { message: 'Passed as Prop!' });
        it('renders without crashing', function () {
            var div = document.createElement('div');
            ReactDOM.render(renderedComponent, div);
            setTimeout(function () {
                ReactDOM.unmountComponentAtNode(div);
            }, 0);
        });
        it('matches snapshot', function () {
            var tree = react_test_renderer_1.default
                .create(renderedComponent)
                .toJSON();
            expect(tree).toMatchSnapshot();
        });
    });
    describe('render states', function () {
        describe('loading', function () {
            describe('when a custom loading component is provided', function () {
                it('renders the custom loading component while the async actions are still in progress', function (done) { return __awaiter(_this, void 0, void 0, function () {
                    var WrappedContentComponent, wrapper;
                    return __generator(this, function (_a) {
                        WrappedContentComponent = _1.rendersAfterAsync(performAsyncFailureHangs, LoadingComponent)(ContentComponent);
                        wrapper = enzyme_1.mount(React.createElement(WrappedContentComponent, { message: 'wubba lubba dub dub' }));
                        expect(wrapper.text()).toBe(loadingCopy);
                        done();
                        return [2 /*return*/];
                    });
                }); });
            });
            describe('when a custom loading component is NOT provided', function () {
                it('renders null while the async actions are still in progress', function (done) { return __awaiter(_this, void 0, void 0, function () {
                    var WrappedContentComponent, wrapper;
                    return __generator(this, function (_a) {
                        WrappedContentComponent = _1.rendersAfterAsync(performAsyncFailureHangs)(ContentComponent);
                        wrapper = enzyme_1.mount(React.createElement(WrappedContentComponent, { message: 'wubba lubba dub dub' }));
                        expect(wrapper.html()).toBe(null);
                        done();
                        return [2 /*return*/];
                    });
                }); });
            });
        });
        describe('error', function () {
            describe('when a custom error component is provided', function () {
                it('renders the custom error component if there is an error during the async actions', function (done) { return __awaiter(_this, void 0, void 0, function () {
                    var WrappedContentComponent, wrapper, _error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                WrappedContentComponent = _1.rendersAfterAsync(performAsyncFailure, null, ErrorComponent)(ContentComponent);
                                wrapper = enzyme_1.mount(React.createElement(WrappedContentComponent, { message: 'ah jeez rick!' }));
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, performAsyncFailure()];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                _error_1 = _a.sent();
                                expect(wrapper.text()).toBe(errorCopy);
                                return [3 /*break*/, 4];
                            case 4:
                                done();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe('when a custom error component is NOT provided', function () {
                it('renders null if there is an error during the async actions', function (done) { return __awaiter(_this, void 0, void 0, function () {
                    var WrappedContentComponent, wrapper, _error_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                WrappedContentComponent = _1.rendersAfterAsync(performAsyncFailure)(ContentComponent);
                                wrapper = enzyme_1.mount(React.createElement(WrappedContentComponent, { message: 'ah jeez rick!' }));
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, performAsyncFailure()];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                _error_2 = _a.sent();
                                expect(wrapper.html()).toBe(null);
                                return [3 /*break*/, 4];
                            case 4:
                                done();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
        describe('success', function () {
            it('renders the wrapped component’s content', function (done) { return __awaiter(_this, void 0, void 0, function () {
                var message, WrappedContentComponent, wrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            message = 'Oooh weee!';
                            WrappedContentComponent = _1.rendersAfterAsync(performAsyncSuccess)(ContentComponent);
                            wrapper = enzyme_1.mount(React.createElement(WrappedContentComponent, { message: message }));
                            return [4 /*yield*/, performAsyncSuccess()];
                        case 1:
                            _a.sent();
                            expect(wrapper.text()).toBe("Content Component: " + message);
                            done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=index.test.js.map